#ifndef SPARSE_VECTOR_HPP
#define SPARSE_VECTOR_HPP

#include "Vector.hpp"
#include "Matrix.hpp"
#include <iostream>
#include <cmath>
#include <vector>
#include <iterator>
#include <algorithm>
#include <cassert>

template<class T> 
class SparseVector{
private:
	//Add your data members here!
	std::vector<unsigned int> mIndex;
	std::vector<T> mValue;
	int mDim;
public:
	//creates an empty vector of dimensionality 0.
	SparseVector()
	{
		//mIndex.resize(0);
		//mValue.resize(0);
		mDim = 0;
	}

	// Creates a vector of dimensionality dim. It starts with 0 nonzero elements
	// which need to be set using setValue
	SparseVector(unsigned int dim)
	{
		mDim = dim;
	}

	// assignment operators and copy constructor should be automatically
	// generated by the compiler when using a std::vector for internal storing.
	// However, test that assignment works!

	//sets the value v_i of the vector. if it does not exist it is added
	void setValue(unsigned int index, T value)
	{
		
		if (index >= mDim)
		{
			std::cout << "Bummer...";
			return;
		}
		std::vector<unsigned int>::iterator low, it;
		it = std::find(mIndex.begin(), mIndex.end(), index);
		low = std::lower_bound(mIndex.begin(), mIndex.end(), index);
		int k = low - mIndex.begin();
		if (it == mIndex.end())
		{
			mIndex.insert(low, index);

			mValue.insert(mValue.begin() +k, value);
		}
		else
		{

			mValue[k] = value;
		}

	}

	//returns the value v_i of the vector. Returns 0 if the value is not stored
	T getValue(unsigned int index)const
	{
		std::vector<unsigned int>::const_iterator it;
		it = std::find(mIndex.begin(), mIndex.end(), index);
		if (it == mIndex.end())
		{
			return 0;
		}
		else
		{
			int k = it - mIndex.begin();
			return mValue[k];
		}
	}

	//returns the dimensionality of the vector
	unsigned int size()const
	{
		return mDim;
	}

	// returns the number stored elements
	unsigned int nonZeroes()const
	{
		return mIndex.size();
	}

	//returns the index of the ith stored nonzero entry (in increasing order)
	unsigned int indexNonZero(unsigned int i)const
	{
		return mIndex[i];
	}

	//returns the value of the ith stored nonzero entry (in increasing order)
	T valueNonZero(unsigned int i)const
	{
		return mValue[i];
	}

	//adds x too the current vector
	SparseVector<T>& operator+= (SparseVector<T> const& x)
	{
		
		for (unsigned int i=0; i < x.nonZeroes(); i++)
		{
			setValue(x.indexNonZero(i), (getValue(x.indexNonZero(i)) + x.valueNonZero(i)));
		}
		return *this;
	}

	//subtracts x from the current vector
	SparseVector<T>& operator-= (SparseVector<T> const& x)
	{
		for (unsigned int i=0; i < x.nonZeroes(); i++)
		{
			setValue(x.indexNonZero(i), (getValue(x.indexNonZero(i)) - x.valueNonZero(i)));
		}
		return *this;
	}
};


// computes z= x+y, equivalent to z=x, z+=y
template<class T>
SparseVector<T> operator+(SparseVector<T> const& x, SparseVector<T> const& y)
{
	assert(x.size() == y.size());
	SparseVector<T> z(x.size());
	z = x;
	z += y;
	return z;
}

// computes z= x-y, equivalent to z=x, z-=y
template<class T>
SparseVector<T> operator-(SparseVector<T> const& x, SparseVector<T> const& y)
{
	assert(x.size() == y.size());
	SparseVector<T> z(x.size());
	z = x;
	z -= y;
	return z;
}

// computes the matrix-vector product of a dense matrix and sparse vector z=Ax.
// The result is a dense vector.
template<class T>
Vector<T> operator* (Matrix<T> const& A, SparseVector<T> const& x)
{
	assert(A.GetNumberOfColumns() == x.size());
	Vector<T> new_vector(A.GetNumberOfRows());
	for (int i = 0; i < A.GetNumberOfRows(); i++)
	{
		for (int j = 0; j < x.size(); j++)
		{
			new_vector[i] += A(i, j)*x.getValue(j);
		}
	}
	return new_vector;
}

// computes the matrix-vector product of a dense matrix and sparse vector z=x^TA.
// The result is a dense vector.
template<class T>
Vector<T> operator* (SparseVector<T> const& x, Matrix<T> const& A)
{
	assert(A.GetNumberOfRows() == x.size());
	Vector<T> new_vector(A.GetNumberOfColumns());
	for (int i = 0; i < A.GetNumberOfColumns(); i++)
	{
		for (int j = 0; j < x.size(); j++)
		{
			new_vector[i] += x.getValue(j)*A(i, j);
		}
	}
	return new_vector;
}

#endif
